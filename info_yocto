#!/bin/bash
# Part of the 'yocto_tools' GitHub repo
# 'A small, simple and useful tool collection for Yocto'
#  https://github.com/kaiwan/yocto_tools
# (c) Kaiwan NB, kaiwanTECH
# License: MIT

# info_yocto
# Displays various useful info about the current Yocto workspace/build
# (see the help screen)
name=$(basename $0)
usage()
{
cat <<@EOF@
Usage: ${name} [option] ; where option can be:
               [-l[x] | -h]
 -l   : show _all_ Layers and their recipes (includes all BB layers[+recipes])
   -x : eXtended format: show names of all recipes under each layer
        Only works if passed in addition to -l, i.e., run as:
          ${name} -lx
      Note that the layers[+recipes] shown does not necessarily imply they're
      going to be built for a given image; that depends on your base image
      package config, local.conf settings, etc.
      (Just seeing all the (large # of) layers+recipes can give an idea
      of the various installable projects/services/apps available!)
 -h   : show this Help screen

In any case, this utility will display:
- minimal info on this system (BUILDDIR, MACHINE, IMAGE_BASENAME, ...)
- some DISTRO details
- package info (# of pkg, total size taken up)
@EOF@
}

pkg_info()
{
# RELOOK / FIXME : need packages specific to a given base image
#local TOTAL_PKGS=$(oe-pkgdata-util list-pkgs 2>/dev/null|wc -l)
#echo "Total number of packages generated (a subset get installed): ${TOTAL_PKGS}"
local PKGSIZE_FILE=${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IB}/installed-package-sizes.txt
#echo "PKGSIZE_FILE = ${PKGSIZE_FILE} ------------------------"

[[ 0 -eq 1 ]] && {
echo "Package size (top 10):"
local PKGSIZE_FILE=${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IB}/installed-package-sizes.txt
head ${PKGSIZE_FILE}
}

local NUM_FILES_INIMG=$(wc -l ${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IB}/files-in-image.txt|awk '{print $1}')
echo "Target root filesystem stats:
 Total number of files in the image:${NUM_FILES_INIMG}"

# The package size manifest (under buildhistory) can provide info
# F.e.: buildhistory/images/qemuarm64/musl/core-image-minimal/installed-package-sizes.txt
echo " Total # of actually installed packages:$(wc -l ${PKGSIZE_FILE} |awk '{print $1}')"
local PKGSIZE_KB=$(cat ${PKGSIZE_FILE} |awk 'BEGIN {t=0} {t+=$1} END {print t}')
echo -n " Total size actually installed packages:${PKGSIZE_KB} KB"
[[ ${PKGSIZE_KB} -gt 1024 ]] && {
	local SZMB=$(bc <<< "scale=2; (${PKGSIZE_KB}/1024.0)")
	echo " (${SZMB} MB)"
} || echo
echo "(Details on installed packages:
 ${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IB}/
  installed-package-info.txt  installed-package-names.txt  installed-package-sizes.txt  installed-packages.txt )"
}

#LAYER_L1="+--------------------------- "
LAYER_L2="+-----------------------------------------------------+"

# Params:
#  $1 : layer directory
#  $2 : layer priority
recipes4layer()
{
[[ $# -ne 2 ]] && {
	echo "*WARN* $0:recipes4layer(): wrong # of params (need 2 received $#)"
	return
}
set +u
local layerdir=$1 layerprio=$2
set -u
local RECIPE_CHAR='>'
[[ ${SHOW_EXTENDED_LAYERREC_INFO} -ne 1 ]] && RECIPE_CHAR=' '

#------- Begin to imitate the 'kas' YAML file layout style
# Eg. (ref: https://low-level.wiki/yocto/yocto-kas.html)
# ...
# meta-openembedded:
#   url: http://git.openembedded.org/meta-openembedded
#   refspec: dunfell
#   path: poky/meta-openembedded
#   layers:
#     meta-oe:
#     meta-python:
#
# meta-raspberrypi:
#   url: https://github.com/agherzan/meta-raspberrypi/
#   path: poky/meta-raspberrypi
#   refspec: dunfell
# ...

#echo "  layers:"
#--- Align the layerprio [n] in a right-justified manner
# Eg. ...
# meta-helloworld:                           [10]
#        recipes-helloworld
# meta-autotools-helloworld:                 [6]
# ...
local layerdir_base=$(basename ${layerdir})
local slen=${#layerdir_base}

printf "    %s:" $(basename ${layerdir})
local numspc=3
[[ ${slen} -lt 42 ]] && numspc=$((42-slen))
for i in $(seq 1 ${numspc})
do
	echo -n " "
done
printf "[%d]\n" ${layerprio}
#printf "    %s:               [%d]\n" $(basename ${layerdir}) ${layerprio}
#---

local recipedir recdir
for recipedir in $(find ${layerdir} -type d -name "recipes-*" 2>/dev/null)
do
	# layer name
	echo "        $(basename ${recipedir})"
	[[ ${SHOW_EXTENDED_LAYERREC_INFO} -ne 1 ]] && continue  # -x passed?
	local i=0
	for recdir in $(find ${recipedir} -type d 2>/dev/null)
	do
		#echo ">>>>>>>>> ${recdir}"
		[[ $i -eq 0 ]] && { # skip the first one
			let i=i+1
			continue
		}
		[[ "$(basename ${recdir})" = "files" ]] && continue
		# recipe name
		echo "            $(basename ${recdir})"
	done
done
}

layers_and_recipes()
{
bitbake-layers show-layers | grep "meta-" > ${TMPF}_bblyr
ORIG_IFS=${IFS}

LAYER_RECIPE_TITLE_HEAD="=== All LAYERS (meta-foo) and RECIPES (recipe-bar)"
LAYER_RECIPE_TITLE_TAIL="within $(dirname ${BUILDDIR}) (format: meta-<layer-name>:   [prio]) ==="
[[ ${SHOW_EXTENDED_LAYERREC_INFO} -eq 1 ]] && \
 LAYER_RECIPE_TITLE="${LAYER_RECIPE_TITLE_HEAD} and all individual RECIPES ${LAYER_RECIPE_TITLE_TAIL}" || \
 LAYER_RECIPE_TITLE="${LAYER_RECIPE_TITLE_HEAD} ${LAYER_RECIPE_TITLE_TAIL}"
echo
echo "${LAYER_RECIPE_TITLE}"

# First show the (default) meta/ dir's layers[+recipes]
# FIXME: hard-coding prio as 5
recipes4layer ${BUILDDIR}/../meta 5

local layerdir layerprio
export IFS=$'\n'
for rec in $(cat ${TMPF}_bblyr)
do
	layerdir=$(grep "${rec}" ${TMPF}_bblyr |awk '{print $2}') || true
	layerprio=$(grep "${rec}" ${TMPF}_bblyr |awk '{print $3}') || true
	#echo "rec=$rec, layerdir = $layerdir, layerprio=$layerprio"
	[[ -z "${layerdir}" ]] && continue
	recipes4layer ${layerdir} ${layerprio}
done
IFS=${ORIG_IFS}
#echo "${LAYER_L2}"
rm -f ${TMPF}_bblyr
}


#--- 'main'
set +u
[[ "$1" = "-h" ]] && {
	usage
	exit 0
}
set -u

PFX=$(dirname "$(which "$0")")    # dir in which the common code and tools reside
source "${PFX}"/common || {
  echo "${name}: could not source 'common' script, aborting..." ; exit 1
}
SEP="-----------------------------------------------------------------------"
TMPF=.t$$

SHOW_LAYERREC_INFO=0
SHOW_EXTENDED_LAYERREC_INFO=0

[[ $# -ge 1 ]] && {
	[[ "$1" = "-l" ]] && SHOW_LAYERREC_INFO=1
	[[ $# -eq 2 && "$2" = "-x" ]] && SHOW_EXTENDED_LAYERREC_INFO=1
	[[ $# -eq 1 && "$1" = "-lx" ]] && {
		SHOW_LAYERREC_INFO=1
		SHOW_EXTENDED_LAYERREC_INFO=1
	}
	[[ "$1" != "-l" ]] && [[ "$1" != "-lx" ]] && 	[[ "$1" != "-h" ]] && {
	   usage; exit 1
	}
}
setup_env #-q

echo "
--- Common ---"
[[ ! -f ${PFX}/showvars2 ]] && die "Couldn't locate the \"${PFX}/showvars2\" script; it should be there when the repo's cloned..."
# Show some 'DISTRO*' bb variables
${PFX}/showvars2 | grep "DISTRO"

# FIXME: ASSUMPTION : distro is 'poky'
# In addition, show distro version - is it Dunfell / Kirkstone / ... - etc...
DISTRO_POKYCONF=${BUILDDIR}/../meta-poky/conf/distro/poky.conf
[[ -f ${DISTRO_POKYCONF} ]] && {
  grep --max-count=1 "^DISTRO_VERSION" ${DISTRO_POKYCONF}
  grep --max-count=1 "^DISTRO_CODENAME" ${DISTRO_POKYCONF}
}
TOTAL_PKGS=$(oe-pkgdata-util list-pkgs 2>/dev/null|wc -l)
echo "Total number of packages generated (a subset get installed): ${TOTAL_PKGS}"

for IB in ${IMAGE_BASENAMES}
do
  echo "
=== For IMAGE_BASENAME '${IB}' ==="

  # Show the init manager (SysVinit or systemd)
  echo -n "INIT manager:"
  INIT_SYSV=0
  INIT_SYSTD=0
  ${PFX}/showvars2 |grep "^DISTRO_FEATURES.*sysvinit" >/dev/null && INIT_SYSV=1
  ${PFX}/showvars2 |grep "^DISTRO_FEATURES.*systemd" >/dev/null && INIT_SYSTD=1
  # sysvinit's often on along with systemd; so if systemd's enabled, it's the one
  [[ ${INIT_SYSTD} -eq 1 ]] && echo "systemd" || echo "sysvinit"

  # Show some info on the build (release ver, build target, etc)
  BUILDID_FILE=${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IB}/build-id.txt
  [[ -f ${BUILDID_FILE} ]] && {
	grep -E "^BB_VERSION|^TARGET_SYS|^MACHINE" ${BUILDID_FILE}
  }
  [[ 0 -eq 1 ]] && { # takes a while!
    echo -n "Kernel ver: "
    bitbake -e virtual/kernel | grep "^PV"|cut -d'=' -f2|cut -d'"' -f2
  }

  pkg_info
done

[[ ${SHOW_LAYERREC_INFO} -eq 1 ]] && layers_and_recipes
exit 0
