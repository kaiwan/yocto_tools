#!/bin/bash
# Part of the 'yocto_tools' GitHub repo
# 'A small, simple and useful tool collection for Yocto'
#  https://github.com/kaiwan/yocto_tools
# (c) Kaiwan NB, kaiwanTECH
# License: MIT

# info_yocto
# Displays various useful info about the current Yocto workspace/build
# (see the help screen)
name=$(basename $0)
usage()
{
cat <<@EOF@
Usage: ${name} [option] ; where option can be:
               [-l[x] | -h]
 -l   : show all Layers and their recipes
   -x : eXtended format: show names of all recipes under each layer/recipe
        Only works if passed in addition to -l, i.e., run as:
          ${name} -lx
 -h   : show this Help screen

In any case, this utility will display:
- minimal info on this system (BUILDDIR, MACHINE, IMAGE_BASENAME, ...)
- some DISTRO details
- package info (# of pkg, total size taken up)
@EOF@
}

set +u
[[ "$1" = "-h" ]] && {
	usage
	exit 0
}
set -u

PFX=$(dirname "$(which "$0")")    # dir in which the common code and tools reside
source "${PFX}"/common || {
  echo "${name}: could not source 'common' script, aborting..." ; exit 1
}
setup_env #-q
SEP="-----------------------------------------------------------------------"
TMPF=.t$$

pkg_info()
{
local TOTAL_PKGS=$(oe-pkgdata-util list-pkgs 2>/dev/null|wc -l)
echo "
Package stats::
Total number of packages generated (a subset get installed): ${TOTAL_PKGS}"
echo "Package size (top 10):"
local PKGSIZE_FILE=${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IMAGE_BASENAME}/installed-package-sizes.txt
head ${PKGSIZE_FILE}

local NUM_FILES_INIMG=$(wc -l ${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IMAGE_BASENAME}/files-in-image.txt|awk '{print $1}')
echo "
Rootfs stats::
Total number of files in the image:${NUM_FILES_INIMG}"

# The package size manifest (under buildhistory) can provide info
# F.e.: buildhistory/images/qemuarm64/musl/core-image-minimal/installed-package-sizes.txt
echo "Total # of actually installed packages:$(wc -l ${PKGSIZE_FILE} |awk '{print $1}')"
local PKGSIZE_KB=$(cat ${PKGSIZE_FILE} |awk 'BEGIN {t=0} {t+=$1} END {print t}')
echo -n "Total size actually installed packages (KiB):${PKGSIZE_KB}"
[[ ${PKGSIZE_KB} -gt 1024 ]] && {
	local SZMB=$(bc <<< "scale=2; (${PKGSIZE_KB}/1024.0)")
	echo " (${SZMB} MB)"
} || echo
}

#LAYER_L1="+--------------------------- "
LAYER_L2="+-----------------------------------------------------+"

# Params:
#  $1 : layer directory
#  $2 : layer priority
recipes4layer()
{
[[ $# -ne 2 ]] && {
	echo "*WARN* $0:recipes4layer(): insufficient params (need 2 received $#)"
	return
}
set +u
local layerdir=$1 layerprio=$2
set -u
local RECIPE_CHAR='>'
[[ ${SHOW_EXTENDED_LAYERREC_INFO} -ne 1 ]] && RECIPE_CHAR=' '

#------- Begin to imitate the 'kas' YAML file layout style
# Eg. (ref: https://low-level.wiki/yocto/yocto-kas.html)
# ...
# meta-openembedded:
#   url: http://git.openembedded.org/meta-openembedded
#   refspec: dunfell
#   path: poky/meta-openembedded
#   layers:
#     meta-oe:
#     meta-python:
#
# meta-raspberrypi:
#   url: https://github.com/agherzan/meta-raspberrypi/
#   path: poky/meta-raspberrypi
#   refspec: dunfell
# ...

#echo "  layers:"
#--- Align the layerprio [n] in a right-justified manner
# Eg. ...
# meta-helloworld:                           [10]
#        recipes-helloworld
# meta-autotools-helloworld:                 [6]
# ...
local layerdir_base=$(basename ${layerdir})
local slen=${#layerdir_base}

printf "    %s:" $(basename ${layerdir})
local numspc=3
[[ ${slen} -lt 42 ]] && numspc=$((42-slen))
for i in $(seq 1 ${numspc})
do
	echo -n " "
done
printf "[%d]\n" ${layerprio}
#printf "    %s:               [%d]\n" $(basename ${layerdir}) ${layerprio}
#---

local recipedir recdir
for recipedir in $(find ${layerdir} -type d -name "recipes-*" 2>/dev/null)
do
	# layer name
	echo "        $(basename ${recipedir})"
	[[ ${SHOW_EXTENDED_LAYERREC_INFO} -ne 1 ]] && continue
	local i=0
	for recdir in $(find ${recipedir} -type d 2>/dev/null)
	do
		#echo ">>>>>>>>> ${recdir}"
		[[ $i -eq 0 ]] && { # skip the first one
			let i=i+1
			continue
		}
		[[ "$(basename ${recdir})" = "files" ]] && continue
		# recipe name
		echo "            $(basename ${recdir})"
	done
done
}

LAYER_RECIPE_TITLE="=== LAYERS (meta-foo) and RECIPES (recipes-bar) within them [layer-prio] ==="
layers_and_recipes()
{
bitbake-layers show-layers |grep "^meta-" > ${TMPF}
ORIG_IFS=${IFS}
echo
echo "${LAYER_RECIPE_TITLE}"
local layerdir layerprio
export IFS=$'\n'
for rec in $(cat ${TMPF})
do
	layerdir=$(echo "${rec}" |awk '{print $2}')
	layerprio=$(echo "${rec}" |awk '{print $3}')
	recipes4layer ${layerdir} ${layerprio}
done
IFS=${ORIG_IFS}
echo "${LAYER_L2}"
rm -f ${TMPF}
}


#--- 'main'
SHOW_LAYERREC_INFO=0
SHOW_EXTENDED_LAYERREC_INFO=0

[[ $# -ge 1 ]] && {
	[[ "$1" = "-l" ]] && SHOW_LAYERREC_INFO=1
	[[ $# -eq 2 && "$2" = "-x" ]] && SHOW_EXTENDED_LAYERREC_INFO=1
	[[ $# -eq 1 && "$1" = "-lx" ]] && {
		SHOW_LAYERREC_INFO=1
		SHOW_EXTENDED_LAYERREC_INFO=1
	}
}

[[ ! -f ${PFX}/showvars2 ]] && die "Couldn't locate the \"${PFX}/showvars2\" script; it should be there when the repo's cloned..."
# Show some 'DISTRO*' bb variables
${PFX}/showvars2 | grep "DISTRO"

# ASSUMPTION : distro is 'poky'
# In addition, show distro version - is it Dunfell / Kirkstone / ... - etc...
DISTRO_POKYCONF=${BUILDDIR}/../meta-poky/conf/distro/poky.conf
[[ -f ${DISTRO_POKYCONF} ]] && {
  grep --max-count=1 "^DISTRO_VERSION" ${DISTRO_POKYCONF}
  grep --max-count=1 "^DISTRO_CODENAME" ${DISTRO_POKYCONF}
}

# Show the init manager (SysVinit or systemd)
echo -n "INIT manager:"
${PFX}/showvars2 |grep "^DISTRO_FEATURES.*sysvinit" >/dev/null && echo "sysvinit" || true
${PFX}/showvars2 |grep "^DISTRO_FEATURES.*systemd" >/dev/null &&  echo "systemd" || true

# Show some info on the build (release ver, build target, etc)
BUILDID_FILE=${BUILDDIR}/buildhistory/images/${MACHINE4BH}/${TCLIBC}/${IMAGE_BASENAME}/build-id.txt
[[ -f ${BUILDID_FILE} ]] && {
	grep -E "^BB_VERSION|^TARGET_SYS|^MACHINE" ${BUILDID_FILE}
}
[[ 0 -eq 1 ]] && { # takes a while!
echo -n "Kernel ver: "
bitbake -e virtual/kernel | grep "^PV"|cut -d'=' -f2|cut -d'"' -f2
}

pkg_info
[[ ${SHOW_LAYERREC_INFO} -eq 1 ]] && layers_and_recipes
exit 0
